static inline float *
vec_negaNf_altivec (float *va, unsigned int ne)
{
  vector float vva1;
  vector float vva2;
  vector float vva3;
  vector float vva4;
  vector float vz;
  unsigned int seg[4];
  float *pva;
  unsigned int ind;

  vz = vec_ctf (vec_splat_u32 (0), 0);
  pva = va;
  vec_segments (seg, 4, ne);

  for (ind = 0; ind < seg[3]; ++ind) {
    vva1 = vec_ld (0, pva);
    vva2 = vec_ld (0, pva + 4);
    vva3 = vec_ld (0, pva + 8);
    vva4 = vec_ld (0, pva + 12);
    vva1 = vec_sub (vz, vva1);
    vva2 = vec_sub (vz, vva2);
    vva3 = vec_sub (vz, vva3);
    vva4 = vec_sub (vz, vva4); 
    vec_st (vva1, 0, pva);
    vec_st (vva2, 0, pva + 4);
    vec_st (vva3, 0, pva + 8);
    vec_st (vva4, 0, pva + 12);
    pva += 16;
  }
  for (ind = 0; ind < seg[2]; ++ind) {
    vva1 = vec_ld (0, pva);
    vva2 = vec_ld (0, pva + 4);
    vva1 = vec_sub (vz, vva1);
    vva2 = vec_sub (vz, vva2);
    vec_st (vva1, 0, pva);
    vec_st (vva2, 0, pva + 4);
    pva += 8;
  }
  for (ind = 0; ind < seg[1]; ++ind) {
    vva1 = vec_ld (0, pva);
    vva1 = vec_sub (vz, vva1);
    vec_st (vva1, 0, pva);
    pva += 4;
  }
  for (ind = 0; ind < seg[0]; ++ind)
    pva[ind] = -pva[ind];

  return va;
}

static inline float *
vec_negaNfx_altivec (const float *va, float *vr, unsigned int ne)
{
  vector float vva1;
  vector float vva2;
  vector float vva3;
  vector float vva4;
  vector float vvr;
  vector float vz;
  unsigned int seg[4];
  const float *pva;
  float *pvr;
  unsigned int ind;

  vz = vec_ctf (vec_splat_u32 (0), 0);
  pva = va;
  pvr = vr;
  vec_segments (seg, 4, ne);

  for (ind = 0; ind < seg[3]; ++ind) {
    vva1 = vec_ld (0, pva);
    vva2 = vec_ld (0, pva + 4);
    vva3 = vec_ld (0, pva + 8);
    vva4 = vec_ld (0, pva + 12);
    vvr = vec_sub (vz, vva1);
    vec_st (vvr, 0, pvr);
    vvr = vec_sub (vz, vva2);
    vec_st (vvr, 0, pvr + 4);
    vvr = vec_sub (vz, vva3);
    vec_st (vvr, 0, pvr + 8);
    vvr = vec_sub (vz, vva4); 
    vec_st (vvr, 0, pvr + 12);
    pva += 16;
    pvr += 16;
  }
  for (ind = 0; ind < seg[2]; ++ind) {
    vva1 = vec_ld (0, pva);
    vva2 = vec_ld (0, pva + 4);
    vvr = vec_sub (vz, vva1);
    vec_st (vvr, 0, pvr);
    vvr = vec_sub (vz, vva2);
    vec_st (vvr, 0, pvr + 4);
    pva += 8;
    pvr += 8;
  }
  for (ind = 0; ind < seg[1]; ++ind) {
    vva1 = vec_ld (0, pva);
    vvr = vec_sub (vz, vva1);
    vec_st (vvr, 0, pvr);
    pva += 4;
    pvr += 4;
  }
  for (ind = 0; ind < seg[0]; ++ind)
    pvr[ind] = -pva[ind];

  return vr;
}

